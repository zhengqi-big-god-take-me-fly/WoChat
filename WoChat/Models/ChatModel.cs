using System.Collections.ObjectModel;

namespace WoChat.Models {
    /// <summary>
    /// This model stores a chat the local user participates in.
    /// You can implement this class however you want, but please keep the public properties available.
    /// </summary>
    /// <todo>
    /// Avatar releted property
    /// </todo>
    public class ChatModel : NotifyPropertyChangedBase {
        /// <summary>
        /// Context outside the model should be able to get ChatId in order to find specific chats.
        /// </summary>
        public string ChatId {
            get {
                return chatId;
            }
            private set {
                chatId = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// Chater is local user.
        /// </summary>
        /// <remarks>
        /// @a20185
        /// Chater is always the local user, so it is NOT necessary to provide this property.
        /// However, it is free for you to store any field like chatee or others :D
        /// </remarks>
        //public UserModel Chater {
        //    get;
        //}

        /// <summary>
        /// The receiver. Should be userId or groupId.
        /// </summary>
        public string ReceiverId {
            get {
                return receiverId;
            }
            set {
                receiverId = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// Indicate chat type
        /// </summary>
        public ChatType Type {
            get {
                return type;
            }
            private set {
                type = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// Display name for a chat.
        /// Typically, it return the nickname of the user when ChatType is User.
        /// </summary>
        public string DisplayName {
            get {
                return displayName;
            }
            set {
                displayName = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// The latest message of this chat, in plain text format. Used for displaying in chat ListViewItem.
        /// </summary>
        public string LatestMessageText {
            get {
                return latestMessageText;
            }
            private set {
                latestMessageText = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// The time of the latest message of this chat, in human-readable format.
        /// </summary>
        public string LatestMessageTimeText {
            get {
                return latestMessageTimeText;
            }
            private set {
                latestMessageTimeText = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// The messages of the chat.
        /// </summary>
        public ObservableCollection<MessageModel> MessageList {
            get {
                return messageList;
            }
            private set {
                messageList = value;
                OnPropertyChanged();
            }
        }

        public ChatModel(string id = "", int t = 0, string dn = "", string lmt = "", string lmtt = "") {
            // ChatId will be generated by database
            ReceiverId = id;
            Type = (ChatType)t;
            DisplayName = dn;
            LatestMessageText = lmt;
            LatestMessageTimeText = lmtt;
        }

        public enum ChatType { User, Group, System };

        private string chatId = "";
        private string receiverId = "";
        private ChatType type = ChatType.User;
        private string displayName = "";
        private string latestMessageText = "";
        private string latestMessageTimeText = "";
        private ObservableCollection<MessageModel> messageList = new ObservableCollection<MessageModel>();
    }
}
